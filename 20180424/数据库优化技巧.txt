可以从CPU、内存、网络、硬盘方面考虑优化：
1、减少数据访问（减少磁盘访问）：建立索引
2、返回更少数据（减少网络传输）：只返回需要的字段
3、减少交互次数（减少网络传输）
4、减少服务器CPU开销
5、利用更多资源


建表：
索引字段要合理设计，不应该存在大量重复数据
索引能提高查询效率，但也会降低insert和update效率，一个表的索引尽量不要超过6个
索引字段尽量设置成not null
尽量用varchar代替char
只含数值信息的字段尽量不要设计成字符型，因为会降低查询和连接效率，增加磁盘开销

查询：
查询避免全表扫描，考虑在where和order by 涉及的字段加索引
尽量避免无用字段的查询，尽量避免使用select *
尽量避免在where子句中对字段进行函数、表达式操作
尽量避免在where子句进行null判断，否则将导致引擎放弃索引进行全表扫描，
尽量避免在where子句使用不等于操作符
尽量避免使用not in，字段存在null值时尽量避免使用in，between的效率比in高，子查询尽量使用exists代替in
使用模糊查询时避免字符串两端都使用模糊匹配
索引是复合索引时，必须使用该索引的第一个字段作为条件，并且尽量让条件字段顺序与索引顺序一致

其他：
删除数据尽量用truncate代替delete
尽量避免大事物操作，提高系统并发能力（如插入大量数据）
尽量避免使用游标
DB2数据库中：适当对表进行统计信息更新（runstats）和表重组（reorg）
表数据量大时可以考虑对表进行分区和分表：
	表分区：根据一个或多个字段对表进行分区
	横向分表：根据字段的特征将表的行记录分成多个小表
	纵向分表：根据应用场景将一个多列的大表分成多个小表，例如将频繁操作的列和不常用的列分到不同的表中
	

视图：可以保留复杂的查询语句，定制用户数据，保证基表的安全性
存储过程：适当使用存储过程可提升查询效率：
	优点：封装复杂操作，只在创建时进行编译，以后每次执行存储过程不需重新编译，可重复使用，安全性高
	缺点：移植不方便，不支持群集
	优化方法：尽量避免大事物操作，尽量避免频繁访问数据量大的表，尽量避免使用游标

执行计划：
mysql:explain select xxx
	type(访问类型): 
		null: mysql在优化过程中分解语句，执行时甚至不用访问表或索引
		const/system: mysql将该查询转换为一个常量
		eq_ref: 唯一性索引
		ref: 非唯一性索引
		range：对索引的扫描开始于某一点，返回匹配域的行，常见于between、>、< 等查询
		index: 遍历索引树
		all: 全表扫描
oracle: 
	explain: explain plan set STATEMENT_ID="testplan" for select xxx
	autotrace: set autotrace on;
	其他图形化工具：plsql developer
	索引扫描的细分：
		索引唯一扫描
		索引范围扫描
		索引全扫描
		索引快速扫描
		索引跳跃扫描
	表连接方式：
		排序-合并连接（merge join)：适合非等值连接
		嵌套循环连接（nested loop join): 适合外部表较小，内部表有唯一索引。可以先返回已经连接的行，实现快速响应
		哈希连接（hash join): 只能用于等值连接，效率较高
		笛卡尔乘积：尽量避免使用
DB2: 
	执行计划脚本：
	#!/bin/sh  
	db2 connect to <db>  
	db2 -tvf $HOME/sqllib/misc/EXPLAIN.DDL  
	db2 set current explain mode explain  
	db2 " <sql> "  
	db2 set current explain mode no  
	db2exfmt -d <db> -g TIC -w -l -s % -n % -o explain.out 
	
	
	
	
	
数据库事物(ACID)：原子性(Atomicity)、一致性(Consistency)、隔离性(Isolation)、持久性(Duration)
	不考虑事物隔离性，会发生：脏读、不可重复读、虚读
	四种隔离级别：序列化、可重复读、读已提交、读未提交

mysql锁级别：
	行级锁：开销最大，加锁慢，会出现死锁，锁粒度最小，发生锁冲突概率最低，并发度最大，适合增删改，典型代表引擎为INNODB
	页级锁：开销、加锁时间、锁粒度介于行级和表级，会出现死锁，并发度一般，典型代表引擎为BDB
	表级锁：开销最小，加锁快，不会出现死锁，锁粒度最大，发生锁冲突概率最高，并发度最小，适合查询，典型代表引擎为MyISAM,MEMORY