ETL：数据抽取、数据清洗转换、数据装载入库
	数据抽取：确定数据源的来源，分析数据源数据与目标数据之间的差异
	数据清洗：过滤不完整数据、错误数据、重复数据等不符合要求的数据并提交给业务部门处理
	数据转换：定义转换规则，将源数据转换成目标格式以便正确装载数据，如字段增删、字段顺序调整、商务规则计算等

数据源定义
数据导出是BI做为数据的提供方为其他系统提供数据，而数据源是BI做为数据的接受方接收数据并入库，以供后续使用。扫描模块对数据源定义表中定义的各个有效数据源的接口路径进行实时的扫描，当发现于数据源定义格式相同的文件时，即触发了扫描作业。扫描的过程调度程序记录下扫描到的文件名，文件日期等信息，记录到数据库查重表和内存查重表，进而生成后续作业。一般情况下扫描作业之后还有分拣、清洗、转载、清理、RUNSTATS等操作，如果数据文件的格式与我们想要的格式不一致的话，我们还需要配置一个转换的作业。下面简要介绍下各个作业的作用。
扫描作业scan，当调度系统发现于数据源定义格式相同的文件时，即触发了扫描作业。扫描作业将数据文件移到_SCND目录下，根据数据文件的文件名生成数据日期、数据地市等参数参数，记录到数据库查重表和内存查重表，进而生成后续作业。
分拣作业allot，将数据源接口从接口文件移至不同的目录。将文件按地市分别放在不同的目录。最终文件移到CIF目录下。
清洗作业dsspreetl，对数据源接口进行记录级的检查。清洗程序根据数据源清洗规则（CTL.TA_ETL_CLEAN_RULE)对数据源接口的数据进行记录级的检查，并将正确的数据存放在cif文件里，错误的数据存放在rej文件里,错误的说明在exp文件里。并且，数据源接口的数据格式和分定长和分隔符两种刑式，分隔符又有不同的表示方法。在清洗这一步骤中，将文件的格式转化为统一用“&”做分隔符的形式。如果数据文件是压缩文件，该作业会对文件进行解压操作，删除.Z或者.gz后缀。最后数据文件位于CIF目录下，文件名会加上.cif后缀。
转换作业Bconvert，对文件进行转换。当数据文件的格式与我们想要的格式不一致时，就需要配置一个转换作业。比如地市编码字段，开发商给我们的字段可能是一个数字的编码比如020，而我们的数据库的设计是两位的地市代码，此时就应该配置转换作业将这个字段转换为‘GZ’。BConvert处理的源文件必需是以“&”作为分隔符。将数据源文件进行编码的转换，字段的重传排序和处理。将文件转换成需要的文件格式。最后数据文件位于CIF目录下，文件名会去掉.cif后缀，改为.pre后缀。配置的时候需要注意CTL.JOB_PARAM_DEF的转换号的字段。
装载作业，用于这个作业的程序有多个，最常用的Multi_load程序。Multi_load将多个文件装载到数据库中。同一个数据源有可能有多个文件。如果每一个文件执行一次装载，将会浪费数据库的资源，multiload程序支持多个文件一起装载，提高对数据库资源的利用。这个装载程序有两种装载方式：-R和-I，即覆盖转载以及增量装载。覆盖转载是在装载文件之前对目标表进行清空的操作，增量装载不进行清表操作，而是对每个数据文件均进行入库。
清理作业clear_data，对已经入库的数据进行删除，备份等操作。当数据入库后，为节省系统空间，将根据清理规则（CTL.DATA_CLEAR_RULES)对数据源文件，临时表进行清理。在清理规则中可以对数据的保留期进行设定。如一个数据源定的保留期是1天，当调起清理程序的输入日期是20051110，清理程序实际是清理20051109的数据。
runstats作业runstats.sh，在进行增删操作后，该程序对数据库的存储、索引等进行优化，提高数据库的效率。


绪论
什么是调度
随着业务发展越来越多， 需要维护的工作也随之越来越多，所以，需要有自动化的系统软件进行辅助工作，一方面减少人工维护的工作量， 一方面提高工作效率，减少人为失误。
BI调度系统是BI研发部自行研发的一个自动化调度管理系统，使所有的工作流程化，自动化。减少人工维护的成本，提高工作效率。
BI系统的应用程序都是需要按周期（每天、每月）去调起运行 的。而调度是实现后台程序运行自动化的系统。 调度系统将每个程序或者存储过程的一次运行当做一个作业，作业的启停时间由调度系统控制。调度系统，就是一个24小时不间断工作的机器人。 按照已设定好的配置，自动判断任务的开始时间，完成任务。
调度系统最大的特点是运用了丰富的事件触发机制来实现复杂的作业处理流程，最优的使用并行策略，达到尽可能高的处理效率。

调度的作用
	调度系统可以按照一定的规则定期调起作业，实现作业按照日周期、月周期以及每周自动调起。调度系统可根据需要调起存储过程、shell/perl脚本、C++程序、Java程序等，调度系统可以接收其他系统传过来的数据也可将数据库的数据导出下发给其他系统，功能很是强大。
	ETL调度系统采用的是事件触发机制，即调度是否需要触发一个作业是根据作业所依赖的事件（条件）是否满足来判定。如，一个作业的开始需要依赖另一个作业的完成。作业的所需要的参数，由它所依赖的作业中获取。
关于调度配置
调度程序的运行基于一系列的控制表，在数据库中的模式为CTL，即control的缩写。其中包括所有作业的定义，作业间的关系，参数的定义以及各种作业运行的限制信息。调度控制表分为固定数据和实时变更的数据表两部分，前者是作业的定义信息，运行的是规则；后者是调度程序在运行中记录的作业运行信息，相关日志等。
调度系统根据这些控制表自动生成作业和参数，完成各种功能，在完成作业后根据一定的规则生成事件触发后续作业。调度配置就是配置这些作业和参数，维护调度系统。
调度配置基础流程
必要的沟通
现在部门的任务都是通过任务单的形式派发，很多任务都需要调度配置人员修改调度配置，这个时候我们要做的第一件事就是了解需求，既在这个需求单中要实现的功能以及调度配置任务需要完成的任务。
	调度配置的任务通常包括存储过程、数据源、脚本作业、以及导出作业新增、修改以及删除。配置前我们应该了解需求，并根据代码编写同事提供的配置进行相应配置。
配置流程
调度配置主要是对数据库中的调度专用表进行作业的增加修改删除等操作，现在的主要形式是对DSS配置文档.xlsm进行修改后到处txt文本后增量升级到这些库表中去。调度专用表是CTL模式的，下面简单的介绍下几种常用作业的配置方法。

存储过程
存储过程（Stored Procedure）是一组为了完成特定功能的SQL语句集，经编译后存储在数据库中。用户通过指定存储过程的名字并给出参数（如果该存储过程带有参数）来执行它。存储过程是数据库中的一个重要对象，任何一个设计良好的数据库应用程序都应该用到存储过程。
目前BI项目大部分设计数据库的操作都是用存储过程实现的。这些存储过程一般都是需要按周期来运行的，这个时候调度系统就可以发挥它的作用了。调度系统可以根据作业的定义、参数设置、作业互斥以及作业依赖等参数设置实现存储过程在适当的时候自动调起。
新增或者修改存储过程的时候可能需要修改作业的这些参数，对应调度的库表是CTL.JOB_INCHARGE、CTL.JOB_DEF、CTL.JOB_PARAM_DEF、CTL.JOB_OPR_OBJ、CTL.JOB_REF、CTL.JOB_TIME_REF等。各个表的配置可以参照类似作业的配置，需注意的地方大致有如下几个地方
1、CTL.JOB_DEF中的job_id、job_name以及area_exp字段。cmd_name字段也需要注意，如果程序在BIDW数据库上运行，则使用procedure程序，如过在DBCTL数据库上运行则用ctlprocedure程序；如果是快点吧数据库执行的程序，则使用WIKI_CallProcedure.sh等程序（具体咨询代码开发人员即可）。
2、CTL.JOB_PARAM_DEF中需要注意的地方有job_id、param_def等字段，需注意的地方时是调度系统并不是直接调用存储过程，而是通过procedure、ctlprocedure、WIKI_CallProcedure.sh等程序调用，所以作业的参数与存储过程的参数并不完全相同。
3、CTL.JOB_OPR_OBJ需要注意的地方有job_id、opr_job、opr_typ，其中opr_job为作业操作的表名，opr_typ是操作的类型，0为读1为写
4、CTL.JOB_REF、CTL.JOB_TIME_REF作业依赖表以及作业时间依赖表，定义作业的前置作业。存储过程都是从各个源表中取数经过各种运算后插入数据到目标表，因此需确定各个源表应有我们想要的数据，此时我们设置这个作业依赖与对其源表进行写操作的作业即可。

SHELL脚本
	SHELL是一个作为用户与Unix系统间接口的程序，它允许用户向操作系统输入需要执行的命令。在SHELL脚本中，你可以连接数据库，进行数据库操作；你可以进行文件操作，文件压缩后移动到某个路径；你可以用命令获取系统信息，从中过滤想要的参数。SHELL脚本在调度系统中较为常用。
	配置时我们可以在CTL.JOB_DEF中的CMD_NAME字段定义脚本的文件名，因为SHELL脚本可能部署在不同主机上，所以还需要注意主机ip的定义字段HOST_NAME，在CTL.JOB_PARAM_DEF中我们可以定义的SHELL脚本需要的参数列表。
	SHELL脚本的配置可以参照类似作业，需要注意的地方有，CTL.JOB_DEF中cmd_name的字段应该填写SHELL脚本的程序名称；在CTL.JOB_PARAM_DEF中定义SHELL脚本的参数，参数与SHELL脚本的参数列表一一对应。SHELL脚本也需要定义CTL.JOB_REF、CTL.JOB_ OPR_OBJ等配置表。
数据导出
BI全称是Business Intelligence即商业智能，我们系统的很多数据需要从其他系统获取，如从计费系统获取用户的使用清单、用户使用GPRS明细，从BOSS系统获取业务办理量数据等等；另外我们还需要将我们经过处理后的数据传送给其他系统，例如省BI经常需要建自己系统中有的数据传送给地市集市BI系统，BI需要向数据挖掘系统传送数据以供其使用。
因为技术上的限制以及安全性的考虑，我们和其他系统的数据传输不是直接以数据库的形式实现，而是采用数据文件的形式。数据传送双方定义好数据传送的接口规范之后，数据提供方将数据从数据库中导出到文本文件中，经过必要的处理后（如压缩、加首尾记录、加校验文件等），以Ftp的方式传送给数据接收方。数据接收方收到文件后首先对文件进行各种前期操作后（如扫描、分拣、清洗以及转换）将数据装载到数据库中。数据导出即BI作为数据的提供方将数据以文件的形式传送给其他系统。
导出代码定义在GIF.TYJ_EXPOTIT_DEF中，每个导出对应一个导出号。在调度系统中，我们根据这个导出号来定义导出作业以及定义这个导出的路径以及分隔符等信息。导出一般使用dbtofile程序要实现，其他导出脚本如ExportToHere.sh、ExportToFrc.sh以及ExportToWhere.sh都是通过对dbtofile的封装来实现。具体配置可以参照类似作业，需注意的是CTL.JOB_PARAM_DEF中的导出号以及分隔符字段。

	在调度配置中，数据源的定义需要定义数据源的格式CTL.TA_ETL_DS_DEF、数据源的主机CTL.TA_ETL_DS_HOST、数据源字段定义CTL.TA_ETL_DS_FIELDS、数据清理规则CTL. DATA_CLEAR_RULES、数据质量控制CTL. TA_ETL_QUALITY_CONTROL、作业分组表CTL. JOB_GROUP、数据源计数定义表CTL. DS_CNT_DEF、作业依赖级别定义表CTL. JOB_LEVEL_CTRL以及CTL.JOB_INCHARGE、CTL.JOB_DEF、CTL.JOB_PARAM_DEF、CTL.JOB_OPR_OBJ、CTL.JOB_REF、CTL.JOB_TIME_REF等数据源相应的作业定义表。如果数据源是非固定个数的数据源，配置的时候还需要配置数据源校验文件格式定义CTL. TA_ETL_LS_FORMAT。
任务提交
生成文本文件
	调度配置完成后要把调度文档《DSS配置文档.xlsm》中的内容全量导出，这时可以使用文档中的一个宏脚本OutputFiles生成文本文件。另外，还需要一个增量升级文件，在其中定义需要升级的作业号、数据源号以及需求的任务号，可参考https://10.200.1.108:443/GDBI/ /02GDBI代码\08配置数据\调度配置\2011\04\调度_DSS-ReqChange-1104-013_全网手机支付二期SFTP明细数据省平台开发.cfg。
测试
	文本文件生成后，应该上传到测试机上进行单元测试，使用的脚本是checkctl.pl，该脚本会对上述文本文件进行语法级的校验，如果有不符合规则的作用，则会报错。需要注意的是测试脚本并不能检查作业的逻辑错误，所以这个需要我们在配置开发的时候多加注意。在提交SVN之前最好还要检查一下文本文件修改的内容，留意是否有修改本次需求之外的地方，需要修改的地方是否有做修改。这时可以使用SVN的Diff功能查看修改的内容。
提交SVN
检查无误后需要把修改的文件提交SVN，包括DSS配置文档.xlsm、生成的文本文件以及上述增量升级文件。
提交OA
	 现在BI项目的任务大多是通过OA进行，调度配置完成后需要把修改内容提交OA，具体包括文本文件所在的文件夹以及上述增量升级文件。在登记代码模块后就可以提交任务了。后续流程会走到测试同事，测试完成后就可以提交升级报告升级。


调度专用表讲解
各种作业的配置可以参照类似作业的配置，下面大致介绍下各个配置，更详细的介绍请参照 调度配置库表字段详解.doc。
CTL.JOB_DEF
作业定义表，为了将应用程序部署到调度系统中被调度系统管理起来，我们需要将这些程序以一种调度系统能够识别的方式进行定义，该表即是用来存储这些定义的集合。定义内容主要包括作业编号、作业名称、作业运行环境、条件等参数。在该表中包含所有当前有效或无效作业的定义记录，任何应用程序必须在此表中定义一个与之对应的作业且作业有效值为1时才有可能被调度程序调起。
CTL.JOB_PARAM_DEF
作业参数定义表，顾名思义自然就是给作业对应的程序定义所需要的参数，这些参数必须包含程序所必须的参数，同时也可以定义一些程序不需要但是用来传递给后续作业的参数(通过VALID_FLAG字段实现)。调度系统在调起作业时可以想象成在命令行输入命令，调度系统将作业定义的CMD_NAME（CTL.JOB_DEF中定义）与参数定义表中的有效参数，按照PARAM_SEQ定义的顺序连接起来形成一条完整的命令，然后传给操作系统调起。通过该表中的作业组字段可以为一个作业配置多组形式参数，此时当作业被不同的依赖组前置触发时会传给程序不同的参数。
CTL.JOB_REF
在调度系统中，会被部署很多很多作业，而部分作业之间会存在一些必须的执行顺序关系，如A作业必须在B作业完成之后可以被调起，那么调度系统如何控制作业的执行顺序呢？该表即是用来定义这些作业之间的关系的。该表中牵涉到几个概念：
后续作业，又称依赖作业，即该作业的执行要依赖其他作业完成，如上面的A作业必须在B作业完成之后，那么A作业就是B作业的后续作业，与之对应的为前置作业，又称被依赖作业，即此处的B作业。对于调度系统而言，所有被管理的作业都是需要被周期性调起，目前而言作业的周期分为日、月、周，那么就可能存在一个月作业（运行周期为月）依赖一个日作业(每天运行)当月所有天都完成后才可以运行，也可能存在一个日作业依赖另外一个日作业的情况，那么调度满足作业直接这些差异化的依赖关系呢，这个就涉及到了依赖级别，请查看如下附件。同时相对时间频率而言，经分系统中的作业（即应用程序）还存在地市频率，即有些作业需要全省跑一次即可，但有些按照地市每个地市都需要跑一次，那么如何来定义这些作业的地市之间的依赖关系呢，这个就牵涉到该表中的依赖组字段。

CTL.JOB_TIME_REF
时间依赖定义表，由于CTL.JOB_REF无法满足作业之间复杂的依赖关系，因此调度系统中增加该表以满足复杂作业依赖关系的需要，因此其功能大致与CTL.JOB_REF一致，不同的是，在CTL.JOB_REF中定义的记录，调度运行过程中是以主动生成事件记录形式进行向后告知，该表中的记录则是需要从CTL.JOB_INST_1中读取相关信息进行向前判断的形式进行，如有如下定义在CTL.JOB_REF中A作业依赖B作业，在CTL.JOB_TIME_REF中有C作业依赖B作业，当B作业完成时，会在CTL.JOB_INST_1中生成一条实例记录，同时会生成一条对A的时间，但是不会生成对C的事件，当C作业被它所依赖的其他作业触发时需要自己去检查CTL.JOB_INST_1中是否有B作业的成功记录。

CTL.JOB_OPR_OBJ
作业互斥表，作业对数据库表进行读写的时候需要对数据库表进行加锁的操作。CTL.JOB_OPR_OBJ就是定义了作业运行的时候对库表进行的加锁。其中JOB_ID即对数据库加锁操作的作业id，OPR_OBJ是被操作的数据库表，OPR_TYP是定义改作业对表操作的类型，0代表该作业对表是读操作，1代表改作业对表是写操作。
CTL.JOB_LIMIT
作用限制表，定义作业运行的时间限制，可定义作业最快可以跑的时间和最晚可以跑的时间。请注意，在这里限定的时间内作业不一定会跑，只是固定如果前置依赖满足且系统有足够的资源时，此作业可以开始运行。
CTL.TA_ETL_DS_DEF
数据源定义表，在BI项目中很多数据我们无法直接得到，比如说用户资料，用户使用清单等等，这个时候我们需要请外部接入数据，这些数据都是以数据文件的形式提供。我们将这些文件接口定义在调度系统中，由调度系统自动扫描文件后将这些数据入口。CTL.TA_ETL_DS_DEF定义了这些接口的主要信息。其中DS_ID字段是对数据接口的一个非重复的编号，以此来唯一标识一个接口。DS_FILENAME_FORMAT 是文件名格式字符串，这是使用正则表达式的方法来识别接口文件的文件名，以此来为接口文件分类，DS_FORMAT_TYP字段是用来标识文件名字符串中变量的类别，TARGET_TABLE_NAME_STR字段定义该接口装载的数据库表。在开发商给BI传送数据文件时，有的情况是文件个数确定，比如每天传送一个文件或者每月传送5个文件，还有一种情况就是每个周期传送文件个数不确定，此时就是用校验文件的格式来判断文件是否到齐。一般使用list文件的格式来记录数据文件的详情，起到校验文件的作用。LS_NAME字段用来标识检验文件的文件名，这个字段也是用正则表达式来表示。
CTL.TA_ETL_DS_FIELDS
CTL.	TA_ETL_DS_FIELDS用来定义接口文件的每个字段的详细信息，DS_ID对应CTL.TA_ETL_DS_DEF中数据源的的ID，DS_FIELD_NAM对应字段的名称。接口文件的文件格式分为两种，一种是各个字段之间以分隔符的形式隔开，如“|”、“&&”等，另外一种是各位字段是定长的。这个时候还需要定义FIELD_START_POSITION、FIELD_END_POSITION，即这个字段在每条记录中是从第几位开始和结束的。
CTL.TA_ETL_LS_FORMAT
CTL. TA_ETL_LS_FORMAT定义了数据源校验文件的格式，即定义校验文件中的各个字段如何区分的，分为定长的和不定长的（以分隔符区分字段）。这个表还定义了校验文件是否有首尾记录，如有则校验时自动跳过这些记录。


特殊作业配置
在调度配置中，有一部分作业较为特殊，如果在配置时不知如何下手，可以参考这一部分。此部分建议对调度比较熟悉的人员阅读。
如何配置一个定时作业
有一些作业需要在特定的时间运行，比如短信提醒的作业、依赖手工操作的作用，这个时候我们可以在正常配置一个作业之后再配置一个时间限制。时间限制可以在配置表CTL. JOB_LIMIT中定义，字段由JOB_ID（需要进行时间限制的作业id），LIMIT_SEQ（时间限制序号，BEGIN_CNDT（时间段起点），END_CNDT（时间段末点），LIMIT_FLAG（时限类别）以及VALID_FLAG（规则有效标志）。时间限制可以单独定义时间段起点，时间段末点，还可定义多个时间段。关于时限类别，1代表日时间段，2代表月时间段，3代表日时间段(只对文件日期小于上一天的生效)。
需要注意的地方：
1、定义了时间限制之后，作业只会在定义的周期内跑，但是这并不意味着作业一定会跑，作业需要其前置全部完成并生产事件后才可运行。
2、如果作业在当前定义的周期内不能满足运行条件，而在下一个周期满足，则作业会在下一个周期运行。比如，作业22100104在时间限制如下，一般来说11年5月5号的1:30到22:00这个时间段作业会跑，数据日期为2011-05-04，但是如果其前置未完成，导致在这个时间段作业不能运行，而在5月5号的1:00其前置依赖满足，这作业会在01:30左右开始跑。

JOB_ID	LIMIT_SEQ	BEGIN_CNDT	END_CNDT	LIMIT_FLAG	VALID_FLAG
作业号	序号	时间段起点	时间段末点	时限类别	规则有效标志
22100104	1	"01:30:00"	"22:00:00"	1	"1"

如何配置一个周作业
	现有调度系统中除了按日周期和月周期运行，还有一种按周运行的作业，即每个星期运行一次。


